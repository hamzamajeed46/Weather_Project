version: "3.9"

services:
  web:
    build: .
    container_name: weather_web
    command: ["./docker/wait-for-it.sh", "db:3306", "--", "python", "manage.py", "runserver", "0.0.0.0:8000"]

    env_file:
      - .env.docker
      - .env # optional, if present
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 20s
      timeout: 5s
      retries: 5

  worker:
    build: .
    container_name: weather_celery_worker
    command: ["./docker/wait-for-it.sh", "db:3306", "--", "celery", "-A", "weather_project", "worker", "-l", "info"]

    env_file:
      - .env.docker
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app

  beat:
    build: .
    container_name: weather_celery_beat
    command: ["./docker/wait-for-it.sh", "db:3306", "--", "celery", "-A", "weather_project", "beat", "-l", "info"]

    env_file:
      - .env.docker
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
      - celery-beat-data:/app/celerybeat

  redis:
    image: redis:7-alpine
    container_name: weather_redis
    ports:
      - "6379:6379"

  db:
    image: mysql:8.0
    container_name: db
    command: ["--default-authentication-plugin=mysql_native_password", "--max_connections=200"]
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer:latest
    container_name: weather_adminer
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy

volumes:
  mysql-data:
  celery-beat-data:
